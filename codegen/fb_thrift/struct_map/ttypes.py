#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

from __future__ import absolute_import
import six
from thrift.util.Recursive import fix_spec
from thrift.Thrift import *
from thrift.protocol.TProtocol import TProtocolException



import pprint
import warnings
from thrift import Thrift
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
from thrift.protocol import TCompactProtocol
from thrift.protocol import THeaderProtocol
try:
  from thrift.protocol import fastbinary
  if fastbinary.version < 2:
    fastbinary = None
    warnings.warn("Disabling fastbinary, need at least version 2")
except:
  fastbinary = None
try:
  from thrift.protocol import fastproto
except:
  fastproto = None
all_structs = []
UTF8STRINGS = bool(0) or sys.version_info.major >= 3

class StructMap:
  """
  Attributes:
   - long_name_foo_bar
   - long_key_bar_name
   - long_foo_key_name
   - key_foo_bar_name
   - name_bar_long_foo
   - bar_foo_key_long
   - bar_foo_long_name
   - long_foo_name_bar
   - key_foo_name_long
   - name_long_foo_key
   - foo_bar_long_name
   - key_bar_name_long
   - bar_name_long_foo
   - key_name_bar_long
   - foo_name_bar_key
   - long_key_foo_name
   - name_foo_long_key
   - key_name_bar_foo
   - bar_long_name_key
   - long_bar_foo_key
   - bar_long_key_foo
   - foo_bar_long_key
   - name_foo_key_bar
   - name_key_long_bar
   - name_key_bar_foo
   - key_bar_long_name
   - long_key_name_bar
   - key_name_long_foo
   - foo_name_key_bar
   - key_name_long_bar
   - foo_name_bar_long
   - name_long_key_foo
   - name_long_key_bar
   - name_bar_foo_long
   - long_bar_name_foo
   - bar_key_foo_name
   - name_foo_key_long
   - foo_long_key_bar
   - key_foo_name_bar
   - key_name_foo_long
   - long_foo_bar_name
   - foo_name_key_long
   - bar_key_long_foo
   - bar_foo_long_key
   - key_long_foo_name
   - name_foo_long_bar
   - foo_key_name_long
   - long_name_bar_foo
   - foo_bar_name_long
   - foo_long_key_name
   - key_bar_foo_name
   - foo_bar_key_name
   - bar_name_foo_long
   - name_bar_key_long
   - key_bar_foo_long
   - long_key_bar_foo
   - key_foo_long_bar
   - bar_foo_name_long
   - key_long_bar_foo
   - long_bar_foo_name
   - foo_long_name_bar
   - long_bar_key_name
   - long_name_foo_key
   - long_foo_name_key
   - name_long_bar_key
   - long_key_foo_bar
   - name_key_foo_long
   - name_key_long_foo
   - key_name_foo_bar
   - long_foo_key_bar
   - foo_name_long_bar
   - name_long_bar_foo
   - long_name_bar_key
   - bar_long_foo_name
   - key_long_bar_name
   - name_key_bar_long
   - foo_long_name_key
   - bar_long_foo_key
   - bar_key_name_long
   - bar_foo_key_name
   - key_long_name_bar
   - long_bar_key_foo
   - foo_name_long_key
   - key_bar_long_foo
   - long_bar_name_key
   - name_bar_long_key
   - key_foo_long_name
   - foo_key_bar_long
   - foo_bar_key_long
   - bar_long_key_name
   - name_bar_key_foo
   - bar_name_key_long
   - bar_name_long_key
   - foo_key_name_bar
   - name_bar_foo_key
   - long_name_key_foo
   - long_name_key_bar
   - foo_key_long_name
   - foo_key_long_bar
   - foo_long_bar_name
   - key_long_name_foo
   - bar_key_long_name
   - foo_bar_name_key
   - key_bar_name_foo
   - foo_long_bar_key
   - name_key_foo_bar
   - bar_name_key_foo
   - long_key_name_foo
   - name_foo_bar_long
   - bar_long_name_foo
   - foo_key_bar_name
   - name_foo_bar_key
   - bar_key_name_foo
   - name_long_foo_bar
   - long_foo_bar_key
   - key_foo_bar_long
   - bar_name_foo_key
   - bar_foo_name_key
   - key_long_foo_bar
   - bar_key_foo_long
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocol) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS)
      return
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocol) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocol) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.long_name_foo_bar = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.long_key_bar_name = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.long_foo_key_name = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.key_foo_bar_name = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.name_bar_long_foo = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.bar_foo_key_long = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.bar_foo_long_name = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.long_foo_name_bar = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.key_foo_name_long = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.name_long_foo_key = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.foo_bar_long_name = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.key_bar_name_long = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.bar_name_long_foo = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.key_name_bar_long = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.foo_name_bar_key = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.long_key_foo_name = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.name_foo_long_key = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.key_name_bar_foo = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.bar_long_name_key = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.long_bar_foo_key = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRING:
          self.bar_long_key_foo = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRING:
          self.foo_bar_long_key = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.STRING:
          self.name_foo_key_bar = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.STRING:
          self.name_key_long_bar = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.STRING:
          self.name_key_bar_foo = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.STRING:
          self.key_bar_long_name = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.STRING:
          self.long_key_name_bar = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.STRING:
          self.key_name_long_foo = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.STRING:
          self.foo_name_key_bar = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.STRING:
          self.key_name_long_bar = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.STRING:
          self.foo_name_bar_long = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.STRING:
          self.name_long_key_foo = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.STRING:
          self.name_long_key_bar = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 34:
        if ftype == TType.STRING:
          self.name_bar_foo_long = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 35:
        if ftype == TType.STRING:
          self.long_bar_name_foo = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 36:
        if ftype == TType.STRING:
          self.bar_key_foo_name = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 37:
        if ftype == TType.STRING:
          self.name_foo_key_long = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 38:
        if ftype == TType.STRING:
          self.foo_long_key_bar = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 39:
        if ftype == TType.STRING:
          self.key_foo_name_bar = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.STRING:
          self.key_name_foo_long = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 41:
        if ftype == TType.STRING:
          self.long_foo_bar_name = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 42:
        if ftype == TType.STRING:
          self.foo_name_key_long = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 43:
        if ftype == TType.STRING:
          self.bar_key_long_foo = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 44:
        if ftype == TType.STRING:
          self.bar_foo_long_key = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 45:
        if ftype == TType.STRING:
          self.key_long_foo_name = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 46:
        if ftype == TType.STRING:
          self.name_foo_long_bar = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 47:
        if ftype == TType.STRING:
          self.foo_key_name_long = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 48:
        if ftype == TType.STRING:
          self.long_name_bar_foo = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 49:
        if ftype == TType.STRING:
          self.foo_bar_name_long = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.STRING:
          self.foo_long_key_name = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 51:
        if ftype == TType.STRING:
          self.key_bar_foo_name = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 52:
        if ftype == TType.STRING:
          self.foo_bar_key_name = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 53:
        if ftype == TType.STRING:
          self.bar_name_foo_long = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 54:
        if ftype == TType.STRING:
          self.name_bar_key_long = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 55:
        if ftype == TType.STRING:
          self.key_bar_foo_long = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 56:
        if ftype == TType.STRING:
          self.long_key_bar_foo = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 57:
        if ftype == TType.STRING:
          self.key_foo_long_bar = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 58:
        if ftype == TType.STRING:
          self.bar_foo_name_long = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 59:
        if ftype == TType.STRING:
          self.key_long_bar_foo = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 60:
        if ftype == TType.STRING:
          self.long_bar_foo_name = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 61:
        if ftype == TType.STRING:
          self.foo_long_name_bar = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 62:
        if ftype == TType.STRING:
          self.long_bar_key_name = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 63:
        if ftype == TType.STRING:
          self.long_name_foo_key = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 64:
        if ftype == TType.STRING:
          self.long_foo_name_key = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 65:
        if ftype == TType.STRING:
          self.name_long_bar_key = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 66:
        if ftype == TType.STRING:
          self.long_key_foo_bar = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 67:
        if ftype == TType.STRING:
          self.name_key_foo_long = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 68:
        if ftype == TType.STRING:
          self.name_key_long_foo = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 69:
        if ftype == TType.STRING:
          self.key_name_foo_bar = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 70:
        if ftype == TType.STRING:
          self.long_foo_key_bar = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 71:
        if ftype == TType.STRING:
          self.foo_name_long_bar = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 72:
        if ftype == TType.STRING:
          self.name_long_bar_foo = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 73:
        if ftype == TType.STRING:
          self.long_name_bar_key = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 74:
        if ftype == TType.STRING:
          self.bar_long_foo_name = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 75:
        if ftype == TType.STRING:
          self.key_long_bar_name = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 76:
        if ftype == TType.STRING:
          self.name_key_bar_long = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 77:
        if ftype == TType.STRING:
          self.foo_long_name_key = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 78:
        if ftype == TType.STRING:
          self.bar_long_foo_key = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 79:
        if ftype == TType.STRING:
          self.bar_key_name_long = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 80:
        if ftype == TType.STRING:
          self.bar_foo_key_name = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 81:
        if ftype == TType.STRING:
          self.key_long_name_bar = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 82:
        if ftype == TType.STRING:
          self.long_bar_key_foo = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 83:
        if ftype == TType.STRING:
          self.foo_name_long_key = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 84:
        if ftype == TType.STRING:
          self.key_bar_long_foo = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 85:
        if ftype == TType.STRING:
          self.long_bar_name_key = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 86:
        if ftype == TType.STRING:
          self.name_bar_long_key = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 87:
        if ftype == TType.STRING:
          self.key_foo_long_name = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 88:
        if ftype == TType.STRING:
          self.foo_key_bar_long = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 89:
        if ftype == TType.STRING:
          self.foo_bar_key_long = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 90:
        if ftype == TType.STRING:
          self.bar_long_key_name = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 91:
        if ftype == TType.STRING:
          self.name_bar_key_foo = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 92:
        if ftype == TType.STRING:
          self.bar_name_key_long = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 93:
        if ftype == TType.STRING:
          self.bar_name_long_key = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 94:
        if ftype == TType.STRING:
          self.foo_key_name_bar = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 95:
        if ftype == TType.STRING:
          self.name_bar_foo_key = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 96:
        if ftype == TType.STRING:
          self.long_name_key_foo = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 97:
        if ftype == TType.STRING:
          self.long_name_key_bar = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 98:
        if ftype == TType.STRING:
          self.foo_key_long_name = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 99:
        if ftype == TType.STRING:
          self.foo_key_long_bar = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 100:
        if ftype == TType.STRING:
          self.foo_long_bar_name = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 101:
        if ftype == TType.STRING:
          self.key_long_name_foo = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 102:
        if ftype == TType.STRING:
          self.bar_key_long_name = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 103:
        if ftype == TType.STRING:
          self.foo_bar_name_key = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 104:
        if ftype == TType.STRING:
          self.key_bar_name_foo = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 105:
        if ftype == TType.STRING:
          self.foo_long_bar_key = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 106:
        if ftype == TType.STRING:
          self.name_key_foo_bar = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 107:
        if ftype == TType.STRING:
          self.bar_name_key_foo = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 108:
        if ftype == TType.STRING:
          self.long_key_name_foo = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 109:
        if ftype == TType.STRING:
          self.name_foo_bar_long = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 110:
        if ftype == TType.STRING:
          self.bar_long_name_foo = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 111:
        if ftype == TType.STRING:
          self.foo_key_bar_name = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 112:
        if ftype == TType.STRING:
          self.name_foo_bar_key = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 113:
        if ftype == TType.STRING:
          self.bar_key_name_foo = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 114:
        if ftype == TType.STRING:
          self.name_long_foo_bar = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 115:
        if ftype == TType.STRING:
          self.long_foo_bar_key = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 116:
        if ftype == TType.STRING:
          self.key_foo_bar_long = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 117:
        if ftype == TType.STRING:
          self.bar_name_foo_key = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 118:
        if ftype == TType.STRING:
          self.bar_foo_name_key = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 119:
        if ftype == TType.STRING:
          self.key_long_foo_bar = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 120:
        if ftype == TType.STRING:
          self.bar_key_foo_long = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()
    if self.long_name_foo_bar == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'long_name_foo_bar' was not found in serialized data! Struct: StructMap")

    if self.long_key_bar_name == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'long_key_bar_name' was not found in serialized data! Struct: StructMap")

    if self.long_foo_key_name == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'long_foo_key_name' was not found in serialized data! Struct: StructMap")

    if self.key_foo_bar_name == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'key_foo_bar_name' was not found in serialized data! Struct: StructMap")

    if self.name_bar_long_foo == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'name_bar_long_foo' was not found in serialized data! Struct: StructMap")

    if self.bar_foo_key_long == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'bar_foo_key_long' was not found in serialized data! Struct: StructMap")

    if self.bar_foo_long_name == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'bar_foo_long_name' was not found in serialized data! Struct: StructMap")

    if self.long_foo_name_bar == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'long_foo_name_bar' was not found in serialized data! Struct: StructMap")

    if self.key_foo_name_long == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'key_foo_name_long' was not found in serialized data! Struct: StructMap")

    if self.name_long_foo_key == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'name_long_foo_key' was not found in serialized data! Struct: StructMap")

    if self.foo_bar_long_name == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'foo_bar_long_name' was not found in serialized data! Struct: StructMap")

    if self.key_bar_name_long == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'key_bar_name_long' was not found in serialized data! Struct: StructMap")

    if self.bar_name_long_foo == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'bar_name_long_foo' was not found in serialized data! Struct: StructMap")

    if self.key_name_bar_long == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'key_name_bar_long' was not found in serialized data! Struct: StructMap")

    if self.foo_name_bar_key == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'foo_name_bar_key' was not found in serialized data! Struct: StructMap")

    if self.long_key_foo_name == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'long_key_foo_name' was not found in serialized data! Struct: StructMap")

    if self.name_foo_long_key == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'name_foo_long_key' was not found in serialized data! Struct: StructMap")

    if self.key_name_bar_foo == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'key_name_bar_foo' was not found in serialized data! Struct: StructMap")

    if self.bar_long_name_key == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'bar_long_name_key' was not found in serialized data! Struct: StructMap")

    if self.long_bar_foo_key == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'long_bar_foo_key' was not found in serialized data! Struct: StructMap")

    if self.bar_long_key_foo == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'bar_long_key_foo' was not found in serialized data! Struct: StructMap")

    if self.foo_bar_long_key == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'foo_bar_long_key' was not found in serialized data! Struct: StructMap")

    if self.name_foo_key_bar == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'name_foo_key_bar' was not found in serialized data! Struct: StructMap")

    if self.name_key_long_bar == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'name_key_long_bar' was not found in serialized data! Struct: StructMap")

    if self.name_key_bar_foo == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'name_key_bar_foo' was not found in serialized data! Struct: StructMap")

    if self.key_bar_long_name == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'key_bar_long_name' was not found in serialized data! Struct: StructMap")

    if self.long_key_name_bar == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'long_key_name_bar' was not found in serialized data! Struct: StructMap")

    if self.key_name_long_foo == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'key_name_long_foo' was not found in serialized data! Struct: StructMap")

    if self.foo_name_key_bar == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'foo_name_key_bar' was not found in serialized data! Struct: StructMap")

    if self.key_name_long_bar == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'key_name_long_bar' was not found in serialized data! Struct: StructMap")

    if self.foo_name_bar_long == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'foo_name_bar_long' was not found in serialized data! Struct: StructMap")

    if self.name_long_key_foo == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'name_long_key_foo' was not found in serialized data! Struct: StructMap")

    if self.name_long_key_bar == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'name_long_key_bar' was not found in serialized data! Struct: StructMap")

    if self.name_bar_foo_long == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'name_bar_foo_long' was not found in serialized data! Struct: StructMap")

    if self.long_bar_name_foo == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'long_bar_name_foo' was not found in serialized data! Struct: StructMap")

    if self.bar_key_foo_name == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'bar_key_foo_name' was not found in serialized data! Struct: StructMap")

    if self.name_foo_key_long == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'name_foo_key_long' was not found in serialized data! Struct: StructMap")

    if self.foo_long_key_bar == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'foo_long_key_bar' was not found in serialized data! Struct: StructMap")

    if self.key_foo_name_bar == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'key_foo_name_bar' was not found in serialized data! Struct: StructMap")

    if self.key_name_foo_long == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'key_name_foo_long' was not found in serialized data! Struct: StructMap")

    if self.long_foo_bar_name == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'long_foo_bar_name' was not found in serialized data! Struct: StructMap")

    if self.foo_name_key_long == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'foo_name_key_long' was not found in serialized data! Struct: StructMap")

    if self.bar_key_long_foo == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'bar_key_long_foo' was not found in serialized data! Struct: StructMap")

    if self.bar_foo_long_key == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'bar_foo_long_key' was not found in serialized data! Struct: StructMap")

    if self.key_long_foo_name == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'key_long_foo_name' was not found in serialized data! Struct: StructMap")

    if self.name_foo_long_bar == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'name_foo_long_bar' was not found in serialized data! Struct: StructMap")

    if self.foo_key_name_long == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'foo_key_name_long' was not found in serialized data! Struct: StructMap")

    if self.long_name_bar_foo == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'long_name_bar_foo' was not found in serialized data! Struct: StructMap")

    if self.foo_bar_name_long == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'foo_bar_name_long' was not found in serialized data! Struct: StructMap")

    if self.foo_long_key_name == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'foo_long_key_name' was not found in serialized data! Struct: StructMap")

    if self.key_bar_foo_name == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'key_bar_foo_name' was not found in serialized data! Struct: StructMap")

    if self.foo_bar_key_name == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'foo_bar_key_name' was not found in serialized data! Struct: StructMap")

    if self.bar_name_foo_long == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'bar_name_foo_long' was not found in serialized data! Struct: StructMap")

    if self.name_bar_key_long == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'name_bar_key_long' was not found in serialized data! Struct: StructMap")

    if self.key_bar_foo_long == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'key_bar_foo_long' was not found in serialized data! Struct: StructMap")

    if self.long_key_bar_foo == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'long_key_bar_foo' was not found in serialized data! Struct: StructMap")

    if self.key_foo_long_bar == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'key_foo_long_bar' was not found in serialized data! Struct: StructMap")

    if self.bar_foo_name_long == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'bar_foo_name_long' was not found in serialized data! Struct: StructMap")

    if self.key_long_bar_foo == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'key_long_bar_foo' was not found in serialized data! Struct: StructMap")

    if self.long_bar_foo_name == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'long_bar_foo_name' was not found in serialized data! Struct: StructMap")

    if self.foo_long_name_bar == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'foo_long_name_bar' was not found in serialized data! Struct: StructMap")

    if self.long_bar_key_name == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'long_bar_key_name' was not found in serialized data! Struct: StructMap")

    if self.long_name_foo_key == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'long_name_foo_key' was not found in serialized data! Struct: StructMap")

    if self.long_foo_name_key == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'long_foo_name_key' was not found in serialized data! Struct: StructMap")

    if self.name_long_bar_key == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'name_long_bar_key' was not found in serialized data! Struct: StructMap")

    if self.long_key_foo_bar == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'long_key_foo_bar' was not found in serialized data! Struct: StructMap")

    if self.name_key_foo_long == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'name_key_foo_long' was not found in serialized data! Struct: StructMap")

    if self.name_key_long_foo == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'name_key_long_foo' was not found in serialized data! Struct: StructMap")

    if self.key_name_foo_bar == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'key_name_foo_bar' was not found in serialized data! Struct: StructMap")

    if self.long_foo_key_bar == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'long_foo_key_bar' was not found in serialized data! Struct: StructMap")

    if self.foo_name_long_bar == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'foo_name_long_bar' was not found in serialized data! Struct: StructMap")

    if self.name_long_bar_foo == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'name_long_bar_foo' was not found in serialized data! Struct: StructMap")

    if self.long_name_bar_key == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'long_name_bar_key' was not found in serialized data! Struct: StructMap")

    if self.bar_long_foo_name == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'bar_long_foo_name' was not found in serialized data! Struct: StructMap")

    if self.key_long_bar_name == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'key_long_bar_name' was not found in serialized data! Struct: StructMap")

    if self.name_key_bar_long == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'name_key_bar_long' was not found in serialized data! Struct: StructMap")

    if self.foo_long_name_key == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'foo_long_name_key' was not found in serialized data! Struct: StructMap")

    if self.bar_long_foo_key == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'bar_long_foo_key' was not found in serialized data! Struct: StructMap")

    if self.bar_key_name_long == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'bar_key_name_long' was not found in serialized data! Struct: StructMap")

    if self.bar_foo_key_name == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'bar_foo_key_name' was not found in serialized data! Struct: StructMap")

    if self.key_long_name_bar == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'key_long_name_bar' was not found in serialized data! Struct: StructMap")

    if self.long_bar_key_foo == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'long_bar_key_foo' was not found in serialized data! Struct: StructMap")

    if self.foo_name_long_key == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'foo_name_long_key' was not found in serialized data! Struct: StructMap")

    if self.key_bar_long_foo == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'key_bar_long_foo' was not found in serialized data! Struct: StructMap")

    if self.long_bar_name_key == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'long_bar_name_key' was not found in serialized data! Struct: StructMap")

    if self.name_bar_long_key == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'name_bar_long_key' was not found in serialized data! Struct: StructMap")

    if self.key_foo_long_name == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'key_foo_long_name' was not found in serialized data! Struct: StructMap")

    if self.foo_key_bar_long == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'foo_key_bar_long' was not found in serialized data! Struct: StructMap")

    if self.foo_bar_key_long == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'foo_bar_key_long' was not found in serialized data! Struct: StructMap")

    if self.bar_long_key_name == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'bar_long_key_name' was not found in serialized data! Struct: StructMap")

    if self.name_bar_key_foo == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'name_bar_key_foo' was not found in serialized data! Struct: StructMap")

    if self.bar_name_key_long == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'bar_name_key_long' was not found in serialized data! Struct: StructMap")

    if self.bar_name_long_key == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'bar_name_long_key' was not found in serialized data! Struct: StructMap")

    if self.foo_key_name_bar == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'foo_key_name_bar' was not found in serialized data! Struct: StructMap")

    if self.name_bar_foo_key == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'name_bar_foo_key' was not found in serialized data! Struct: StructMap")

    if self.long_name_key_foo == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'long_name_key_foo' was not found in serialized data! Struct: StructMap")

    if self.long_name_key_bar == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'long_name_key_bar' was not found in serialized data! Struct: StructMap")

    if self.foo_key_long_name == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'foo_key_long_name' was not found in serialized data! Struct: StructMap")

    if self.foo_key_long_bar == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'foo_key_long_bar' was not found in serialized data! Struct: StructMap")

    if self.foo_long_bar_name == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'foo_long_bar_name' was not found in serialized data! Struct: StructMap")

    if self.key_long_name_foo == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'key_long_name_foo' was not found in serialized data! Struct: StructMap")

    if self.bar_key_long_name == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'bar_key_long_name' was not found in serialized data! Struct: StructMap")

    if self.foo_bar_name_key == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'foo_bar_name_key' was not found in serialized data! Struct: StructMap")

    if self.key_bar_name_foo == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'key_bar_name_foo' was not found in serialized data! Struct: StructMap")

    if self.foo_long_bar_key == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'foo_long_bar_key' was not found in serialized data! Struct: StructMap")

    if self.name_key_foo_bar == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'name_key_foo_bar' was not found in serialized data! Struct: StructMap")

    if self.bar_name_key_foo == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'bar_name_key_foo' was not found in serialized data! Struct: StructMap")

    if self.long_key_name_foo == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'long_key_name_foo' was not found in serialized data! Struct: StructMap")

    if self.name_foo_bar_long == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'name_foo_bar_long' was not found in serialized data! Struct: StructMap")

    if self.bar_long_name_foo == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'bar_long_name_foo' was not found in serialized data! Struct: StructMap")

    if self.foo_key_bar_name == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'foo_key_bar_name' was not found in serialized data! Struct: StructMap")

    if self.name_foo_bar_key == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'name_foo_bar_key' was not found in serialized data! Struct: StructMap")

    if self.bar_key_name_foo == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'bar_key_name_foo' was not found in serialized data! Struct: StructMap")

    if self.name_long_foo_bar == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'name_long_foo_bar' was not found in serialized data! Struct: StructMap")

    if self.long_foo_bar_key == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'long_foo_bar_key' was not found in serialized data! Struct: StructMap")

    if self.key_foo_bar_long == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'key_foo_bar_long' was not found in serialized data! Struct: StructMap")

    if self.bar_name_foo_key == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'bar_name_foo_key' was not found in serialized data! Struct: StructMap")

    if self.bar_foo_name_key == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'bar_foo_name_key' was not found in serialized data! Struct: StructMap")

    if self.key_long_foo_bar == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'key_long_foo_bar' was not found in serialized data! Struct: StructMap")

    if self.bar_key_foo_long == None:
      raise TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'bar_key_foo_long' was not found in serialized data! Struct: StructMap")


  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocol) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS))
      return
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocol) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocol) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('StructMap')
    if self.long_name_foo_bar != None:
      oprot.writeFieldBegin('long_name_foo_bar', TType.STRING, 1)
      oprot.writeString(self.long_name_foo_bar.encode('utf-8')) if UTF8STRINGS and not isinstance(self.long_name_foo_bar, bytes) else oprot.writeString(self.long_name_foo_bar)
      oprot.writeFieldEnd()
    if self.long_key_bar_name != None:
      oprot.writeFieldBegin('long_key_bar_name', TType.STRING, 2)
      oprot.writeString(self.long_key_bar_name.encode('utf-8')) if UTF8STRINGS and not isinstance(self.long_key_bar_name, bytes) else oprot.writeString(self.long_key_bar_name)
      oprot.writeFieldEnd()
    if self.long_foo_key_name != None:
      oprot.writeFieldBegin('long_foo_key_name', TType.STRING, 3)
      oprot.writeString(self.long_foo_key_name.encode('utf-8')) if UTF8STRINGS and not isinstance(self.long_foo_key_name, bytes) else oprot.writeString(self.long_foo_key_name)
      oprot.writeFieldEnd()
    if self.key_foo_bar_name != None:
      oprot.writeFieldBegin('key_foo_bar_name', TType.STRING, 4)
      oprot.writeString(self.key_foo_bar_name.encode('utf-8')) if UTF8STRINGS and not isinstance(self.key_foo_bar_name, bytes) else oprot.writeString(self.key_foo_bar_name)
      oprot.writeFieldEnd()
    if self.name_bar_long_foo != None:
      oprot.writeFieldBegin('name_bar_long_foo', TType.STRING, 5)
      oprot.writeString(self.name_bar_long_foo.encode('utf-8')) if UTF8STRINGS and not isinstance(self.name_bar_long_foo, bytes) else oprot.writeString(self.name_bar_long_foo)
      oprot.writeFieldEnd()
    if self.bar_foo_key_long != None:
      oprot.writeFieldBegin('bar_foo_key_long', TType.STRING, 6)
      oprot.writeString(self.bar_foo_key_long.encode('utf-8')) if UTF8STRINGS and not isinstance(self.bar_foo_key_long, bytes) else oprot.writeString(self.bar_foo_key_long)
      oprot.writeFieldEnd()
    if self.bar_foo_long_name != None:
      oprot.writeFieldBegin('bar_foo_long_name', TType.STRING, 7)
      oprot.writeString(self.bar_foo_long_name.encode('utf-8')) if UTF8STRINGS and not isinstance(self.bar_foo_long_name, bytes) else oprot.writeString(self.bar_foo_long_name)
      oprot.writeFieldEnd()
    if self.long_foo_name_bar != None:
      oprot.writeFieldBegin('long_foo_name_bar', TType.STRING, 8)
      oprot.writeString(self.long_foo_name_bar.encode('utf-8')) if UTF8STRINGS and not isinstance(self.long_foo_name_bar, bytes) else oprot.writeString(self.long_foo_name_bar)
      oprot.writeFieldEnd()
    if self.key_foo_name_long != None:
      oprot.writeFieldBegin('key_foo_name_long', TType.STRING, 9)
      oprot.writeString(self.key_foo_name_long.encode('utf-8')) if UTF8STRINGS and not isinstance(self.key_foo_name_long, bytes) else oprot.writeString(self.key_foo_name_long)
      oprot.writeFieldEnd()
    if self.name_long_foo_key != None:
      oprot.writeFieldBegin('name_long_foo_key', TType.STRING, 10)
      oprot.writeString(self.name_long_foo_key.encode('utf-8')) if UTF8STRINGS and not isinstance(self.name_long_foo_key, bytes) else oprot.writeString(self.name_long_foo_key)
      oprot.writeFieldEnd()
    if self.foo_bar_long_name != None:
      oprot.writeFieldBegin('foo_bar_long_name', TType.STRING, 11)
      oprot.writeString(self.foo_bar_long_name.encode('utf-8')) if UTF8STRINGS and not isinstance(self.foo_bar_long_name, bytes) else oprot.writeString(self.foo_bar_long_name)
      oprot.writeFieldEnd()
    if self.key_bar_name_long != None:
      oprot.writeFieldBegin('key_bar_name_long', TType.STRING, 12)
      oprot.writeString(self.key_bar_name_long.encode('utf-8')) if UTF8STRINGS and not isinstance(self.key_bar_name_long, bytes) else oprot.writeString(self.key_bar_name_long)
      oprot.writeFieldEnd()
    if self.bar_name_long_foo != None:
      oprot.writeFieldBegin('bar_name_long_foo', TType.STRING, 13)
      oprot.writeString(self.bar_name_long_foo.encode('utf-8')) if UTF8STRINGS and not isinstance(self.bar_name_long_foo, bytes) else oprot.writeString(self.bar_name_long_foo)
      oprot.writeFieldEnd()
    if self.key_name_bar_long != None:
      oprot.writeFieldBegin('key_name_bar_long', TType.STRING, 14)
      oprot.writeString(self.key_name_bar_long.encode('utf-8')) if UTF8STRINGS and not isinstance(self.key_name_bar_long, bytes) else oprot.writeString(self.key_name_bar_long)
      oprot.writeFieldEnd()
    if self.foo_name_bar_key != None:
      oprot.writeFieldBegin('foo_name_bar_key', TType.STRING, 15)
      oprot.writeString(self.foo_name_bar_key.encode('utf-8')) if UTF8STRINGS and not isinstance(self.foo_name_bar_key, bytes) else oprot.writeString(self.foo_name_bar_key)
      oprot.writeFieldEnd()
    if self.long_key_foo_name != None:
      oprot.writeFieldBegin('long_key_foo_name', TType.STRING, 16)
      oprot.writeString(self.long_key_foo_name.encode('utf-8')) if UTF8STRINGS and not isinstance(self.long_key_foo_name, bytes) else oprot.writeString(self.long_key_foo_name)
      oprot.writeFieldEnd()
    if self.name_foo_long_key != None:
      oprot.writeFieldBegin('name_foo_long_key', TType.STRING, 17)
      oprot.writeString(self.name_foo_long_key.encode('utf-8')) if UTF8STRINGS and not isinstance(self.name_foo_long_key, bytes) else oprot.writeString(self.name_foo_long_key)
      oprot.writeFieldEnd()
    if self.key_name_bar_foo != None:
      oprot.writeFieldBegin('key_name_bar_foo', TType.STRING, 18)
      oprot.writeString(self.key_name_bar_foo.encode('utf-8')) if UTF8STRINGS and not isinstance(self.key_name_bar_foo, bytes) else oprot.writeString(self.key_name_bar_foo)
      oprot.writeFieldEnd()
    if self.bar_long_name_key != None:
      oprot.writeFieldBegin('bar_long_name_key', TType.STRING, 19)
      oprot.writeString(self.bar_long_name_key.encode('utf-8')) if UTF8STRINGS and not isinstance(self.bar_long_name_key, bytes) else oprot.writeString(self.bar_long_name_key)
      oprot.writeFieldEnd()
    if self.long_bar_foo_key != None:
      oprot.writeFieldBegin('long_bar_foo_key', TType.STRING, 20)
      oprot.writeString(self.long_bar_foo_key.encode('utf-8')) if UTF8STRINGS and not isinstance(self.long_bar_foo_key, bytes) else oprot.writeString(self.long_bar_foo_key)
      oprot.writeFieldEnd()
    if self.bar_long_key_foo != None:
      oprot.writeFieldBegin('bar_long_key_foo', TType.STRING, 21)
      oprot.writeString(self.bar_long_key_foo.encode('utf-8')) if UTF8STRINGS and not isinstance(self.bar_long_key_foo, bytes) else oprot.writeString(self.bar_long_key_foo)
      oprot.writeFieldEnd()
    if self.foo_bar_long_key != None:
      oprot.writeFieldBegin('foo_bar_long_key', TType.STRING, 22)
      oprot.writeString(self.foo_bar_long_key.encode('utf-8')) if UTF8STRINGS and not isinstance(self.foo_bar_long_key, bytes) else oprot.writeString(self.foo_bar_long_key)
      oprot.writeFieldEnd()
    if self.name_foo_key_bar != None:
      oprot.writeFieldBegin('name_foo_key_bar', TType.STRING, 23)
      oprot.writeString(self.name_foo_key_bar.encode('utf-8')) if UTF8STRINGS and not isinstance(self.name_foo_key_bar, bytes) else oprot.writeString(self.name_foo_key_bar)
      oprot.writeFieldEnd()
    if self.name_key_long_bar != None:
      oprot.writeFieldBegin('name_key_long_bar', TType.STRING, 24)
      oprot.writeString(self.name_key_long_bar.encode('utf-8')) if UTF8STRINGS and not isinstance(self.name_key_long_bar, bytes) else oprot.writeString(self.name_key_long_bar)
      oprot.writeFieldEnd()
    if self.name_key_bar_foo != None:
      oprot.writeFieldBegin('name_key_bar_foo', TType.STRING, 25)
      oprot.writeString(self.name_key_bar_foo.encode('utf-8')) if UTF8STRINGS and not isinstance(self.name_key_bar_foo, bytes) else oprot.writeString(self.name_key_bar_foo)
      oprot.writeFieldEnd()
    if self.key_bar_long_name != None:
      oprot.writeFieldBegin('key_bar_long_name', TType.STRING, 26)
      oprot.writeString(self.key_bar_long_name.encode('utf-8')) if UTF8STRINGS and not isinstance(self.key_bar_long_name, bytes) else oprot.writeString(self.key_bar_long_name)
      oprot.writeFieldEnd()
    if self.long_key_name_bar != None:
      oprot.writeFieldBegin('long_key_name_bar', TType.STRING, 27)
      oprot.writeString(self.long_key_name_bar.encode('utf-8')) if UTF8STRINGS and not isinstance(self.long_key_name_bar, bytes) else oprot.writeString(self.long_key_name_bar)
      oprot.writeFieldEnd()
    if self.key_name_long_foo != None:
      oprot.writeFieldBegin('key_name_long_foo', TType.STRING, 28)
      oprot.writeString(self.key_name_long_foo.encode('utf-8')) if UTF8STRINGS and not isinstance(self.key_name_long_foo, bytes) else oprot.writeString(self.key_name_long_foo)
      oprot.writeFieldEnd()
    if self.foo_name_key_bar != None:
      oprot.writeFieldBegin('foo_name_key_bar', TType.STRING, 29)
      oprot.writeString(self.foo_name_key_bar.encode('utf-8')) if UTF8STRINGS and not isinstance(self.foo_name_key_bar, bytes) else oprot.writeString(self.foo_name_key_bar)
      oprot.writeFieldEnd()
    if self.key_name_long_bar != None:
      oprot.writeFieldBegin('key_name_long_bar', TType.STRING, 30)
      oprot.writeString(self.key_name_long_bar.encode('utf-8')) if UTF8STRINGS and not isinstance(self.key_name_long_bar, bytes) else oprot.writeString(self.key_name_long_bar)
      oprot.writeFieldEnd()
    if self.foo_name_bar_long != None:
      oprot.writeFieldBegin('foo_name_bar_long', TType.STRING, 31)
      oprot.writeString(self.foo_name_bar_long.encode('utf-8')) if UTF8STRINGS and not isinstance(self.foo_name_bar_long, bytes) else oprot.writeString(self.foo_name_bar_long)
      oprot.writeFieldEnd()
    if self.name_long_key_foo != None:
      oprot.writeFieldBegin('name_long_key_foo', TType.STRING, 32)
      oprot.writeString(self.name_long_key_foo.encode('utf-8')) if UTF8STRINGS and not isinstance(self.name_long_key_foo, bytes) else oprot.writeString(self.name_long_key_foo)
      oprot.writeFieldEnd()
    if self.name_long_key_bar != None:
      oprot.writeFieldBegin('name_long_key_bar', TType.STRING, 33)
      oprot.writeString(self.name_long_key_bar.encode('utf-8')) if UTF8STRINGS and not isinstance(self.name_long_key_bar, bytes) else oprot.writeString(self.name_long_key_bar)
      oprot.writeFieldEnd()
    if self.name_bar_foo_long != None:
      oprot.writeFieldBegin('name_bar_foo_long', TType.STRING, 34)
      oprot.writeString(self.name_bar_foo_long.encode('utf-8')) if UTF8STRINGS and not isinstance(self.name_bar_foo_long, bytes) else oprot.writeString(self.name_bar_foo_long)
      oprot.writeFieldEnd()
    if self.long_bar_name_foo != None:
      oprot.writeFieldBegin('long_bar_name_foo', TType.STRING, 35)
      oprot.writeString(self.long_bar_name_foo.encode('utf-8')) if UTF8STRINGS and not isinstance(self.long_bar_name_foo, bytes) else oprot.writeString(self.long_bar_name_foo)
      oprot.writeFieldEnd()
    if self.bar_key_foo_name != None:
      oprot.writeFieldBegin('bar_key_foo_name', TType.STRING, 36)
      oprot.writeString(self.bar_key_foo_name.encode('utf-8')) if UTF8STRINGS and not isinstance(self.bar_key_foo_name, bytes) else oprot.writeString(self.bar_key_foo_name)
      oprot.writeFieldEnd()
    if self.name_foo_key_long != None:
      oprot.writeFieldBegin('name_foo_key_long', TType.STRING, 37)
      oprot.writeString(self.name_foo_key_long.encode('utf-8')) if UTF8STRINGS and not isinstance(self.name_foo_key_long, bytes) else oprot.writeString(self.name_foo_key_long)
      oprot.writeFieldEnd()
    if self.foo_long_key_bar != None:
      oprot.writeFieldBegin('foo_long_key_bar', TType.STRING, 38)
      oprot.writeString(self.foo_long_key_bar.encode('utf-8')) if UTF8STRINGS and not isinstance(self.foo_long_key_bar, bytes) else oprot.writeString(self.foo_long_key_bar)
      oprot.writeFieldEnd()
    if self.key_foo_name_bar != None:
      oprot.writeFieldBegin('key_foo_name_bar', TType.STRING, 39)
      oprot.writeString(self.key_foo_name_bar.encode('utf-8')) if UTF8STRINGS and not isinstance(self.key_foo_name_bar, bytes) else oprot.writeString(self.key_foo_name_bar)
      oprot.writeFieldEnd()
    if self.key_name_foo_long != None:
      oprot.writeFieldBegin('key_name_foo_long', TType.STRING, 40)
      oprot.writeString(self.key_name_foo_long.encode('utf-8')) if UTF8STRINGS and not isinstance(self.key_name_foo_long, bytes) else oprot.writeString(self.key_name_foo_long)
      oprot.writeFieldEnd()
    if self.long_foo_bar_name != None:
      oprot.writeFieldBegin('long_foo_bar_name', TType.STRING, 41)
      oprot.writeString(self.long_foo_bar_name.encode('utf-8')) if UTF8STRINGS and not isinstance(self.long_foo_bar_name, bytes) else oprot.writeString(self.long_foo_bar_name)
      oprot.writeFieldEnd()
    if self.foo_name_key_long != None:
      oprot.writeFieldBegin('foo_name_key_long', TType.STRING, 42)
      oprot.writeString(self.foo_name_key_long.encode('utf-8')) if UTF8STRINGS and not isinstance(self.foo_name_key_long, bytes) else oprot.writeString(self.foo_name_key_long)
      oprot.writeFieldEnd()
    if self.bar_key_long_foo != None:
      oprot.writeFieldBegin('bar_key_long_foo', TType.STRING, 43)
      oprot.writeString(self.bar_key_long_foo.encode('utf-8')) if UTF8STRINGS and not isinstance(self.bar_key_long_foo, bytes) else oprot.writeString(self.bar_key_long_foo)
      oprot.writeFieldEnd()
    if self.bar_foo_long_key != None:
      oprot.writeFieldBegin('bar_foo_long_key', TType.STRING, 44)
      oprot.writeString(self.bar_foo_long_key.encode('utf-8')) if UTF8STRINGS and not isinstance(self.bar_foo_long_key, bytes) else oprot.writeString(self.bar_foo_long_key)
      oprot.writeFieldEnd()
    if self.key_long_foo_name != None:
      oprot.writeFieldBegin('key_long_foo_name', TType.STRING, 45)
      oprot.writeString(self.key_long_foo_name.encode('utf-8')) if UTF8STRINGS and not isinstance(self.key_long_foo_name, bytes) else oprot.writeString(self.key_long_foo_name)
      oprot.writeFieldEnd()
    if self.name_foo_long_bar != None:
      oprot.writeFieldBegin('name_foo_long_bar', TType.STRING, 46)
      oprot.writeString(self.name_foo_long_bar.encode('utf-8')) if UTF8STRINGS and not isinstance(self.name_foo_long_bar, bytes) else oprot.writeString(self.name_foo_long_bar)
      oprot.writeFieldEnd()
    if self.foo_key_name_long != None:
      oprot.writeFieldBegin('foo_key_name_long', TType.STRING, 47)
      oprot.writeString(self.foo_key_name_long.encode('utf-8')) if UTF8STRINGS and not isinstance(self.foo_key_name_long, bytes) else oprot.writeString(self.foo_key_name_long)
      oprot.writeFieldEnd()
    if self.long_name_bar_foo != None:
      oprot.writeFieldBegin('long_name_bar_foo', TType.STRING, 48)
      oprot.writeString(self.long_name_bar_foo.encode('utf-8')) if UTF8STRINGS and not isinstance(self.long_name_bar_foo, bytes) else oprot.writeString(self.long_name_bar_foo)
      oprot.writeFieldEnd()
    if self.foo_bar_name_long != None:
      oprot.writeFieldBegin('foo_bar_name_long', TType.STRING, 49)
      oprot.writeString(self.foo_bar_name_long.encode('utf-8')) if UTF8STRINGS and not isinstance(self.foo_bar_name_long, bytes) else oprot.writeString(self.foo_bar_name_long)
      oprot.writeFieldEnd()
    if self.foo_long_key_name != None:
      oprot.writeFieldBegin('foo_long_key_name', TType.STRING, 50)
      oprot.writeString(self.foo_long_key_name.encode('utf-8')) if UTF8STRINGS and not isinstance(self.foo_long_key_name, bytes) else oprot.writeString(self.foo_long_key_name)
      oprot.writeFieldEnd()
    if self.key_bar_foo_name != None:
      oprot.writeFieldBegin('key_bar_foo_name', TType.STRING, 51)
      oprot.writeString(self.key_bar_foo_name.encode('utf-8')) if UTF8STRINGS and not isinstance(self.key_bar_foo_name, bytes) else oprot.writeString(self.key_bar_foo_name)
      oprot.writeFieldEnd()
    if self.foo_bar_key_name != None:
      oprot.writeFieldBegin('foo_bar_key_name', TType.STRING, 52)
      oprot.writeString(self.foo_bar_key_name.encode('utf-8')) if UTF8STRINGS and not isinstance(self.foo_bar_key_name, bytes) else oprot.writeString(self.foo_bar_key_name)
      oprot.writeFieldEnd()
    if self.bar_name_foo_long != None:
      oprot.writeFieldBegin('bar_name_foo_long', TType.STRING, 53)
      oprot.writeString(self.bar_name_foo_long.encode('utf-8')) if UTF8STRINGS and not isinstance(self.bar_name_foo_long, bytes) else oprot.writeString(self.bar_name_foo_long)
      oprot.writeFieldEnd()
    if self.name_bar_key_long != None:
      oprot.writeFieldBegin('name_bar_key_long', TType.STRING, 54)
      oprot.writeString(self.name_bar_key_long.encode('utf-8')) if UTF8STRINGS and not isinstance(self.name_bar_key_long, bytes) else oprot.writeString(self.name_bar_key_long)
      oprot.writeFieldEnd()
    if self.key_bar_foo_long != None:
      oprot.writeFieldBegin('key_bar_foo_long', TType.STRING, 55)
      oprot.writeString(self.key_bar_foo_long.encode('utf-8')) if UTF8STRINGS and not isinstance(self.key_bar_foo_long, bytes) else oprot.writeString(self.key_bar_foo_long)
      oprot.writeFieldEnd()
    if self.long_key_bar_foo != None:
      oprot.writeFieldBegin('long_key_bar_foo', TType.STRING, 56)
      oprot.writeString(self.long_key_bar_foo.encode('utf-8')) if UTF8STRINGS and not isinstance(self.long_key_bar_foo, bytes) else oprot.writeString(self.long_key_bar_foo)
      oprot.writeFieldEnd()
    if self.key_foo_long_bar != None:
      oprot.writeFieldBegin('key_foo_long_bar', TType.STRING, 57)
      oprot.writeString(self.key_foo_long_bar.encode('utf-8')) if UTF8STRINGS and not isinstance(self.key_foo_long_bar, bytes) else oprot.writeString(self.key_foo_long_bar)
      oprot.writeFieldEnd()
    if self.bar_foo_name_long != None:
      oprot.writeFieldBegin('bar_foo_name_long', TType.STRING, 58)
      oprot.writeString(self.bar_foo_name_long.encode('utf-8')) if UTF8STRINGS and not isinstance(self.bar_foo_name_long, bytes) else oprot.writeString(self.bar_foo_name_long)
      oprot.writeFieldEnd()
    if self.key_long_bar_foo != None:
      oprot.writeFieldBegin('key_long_bar_foo', TType.STRING, 59)
      oprot.writeString(self.key_long_bar_foo.encode('utf-8')) if UTF8STRINGS and not isinstance(self.key_long_bar_foo, bytes) else oprot.writeString(self.key_long_bar_foo)
      oprot.writeFieldEnd()
    if self.long_bar_foo_name != None:
      oprot.writeFieldBegin('long_bar_foo_name', TType.STRING, 60)
      oprot.writeString(self.long_bar_foo_name.encode('utf-8')) if UTF8STRINGS and not isinstance(self.long_bar_foo_name, bytes) else oprot.writeString(self.long_bar_foo_name)
      oprot.writeFieldEnd()
    if self.foo_long_name_bar != None:
      oprot.writeFieldBegin('foo_long_name_bar', TType.STRING, 61)
      oprot.writeString(self.foo_long_name_bar.encode('utf-8')) if UTF8STRINGS and not isinstance(self.foo_long_name_bar, bytes) else oprot.writeString(self.foo_long_name_bar)
      oprot.writeFieldEnd()
    if self.long_bar_key_name != None:
      oprot.writeFieldBegin('long_bar_key_name', TType.STRING, 62)
      oprot.writeString(self.long_bar_key_name.encode('utf-8')) if UTF8STRINGS and not isinstance(self.long_bar_key_name, bytes) else oprot.writeString(self.long_bar_key_name)
      oprot.writeFieldEnd()
    if self.long_name_foo_key != None:
      oprot.writeFieldBegin('long_name_foo_key', TType.STRING, 63)
      oprot.writeString(self.long_name_foo_key.encode('utf-8')) if UTF8STRINGS and not isinstance(self.long_name_foo_key, bytes) else oprot.writeString(self.long_name_foo_key)
      oprot.writeFieldEnd()
    if self.long_foo_name_key != None:
      oprot.writeFieldBegin('long_foo_name_key', TType.STRING, 64)
      oprot.writeString(self.long_foo_name_key.encode('utf-8')) if UTF8STRINGS and not isinstance(self.long_foo_name_key, bytes) else oprot.writeString(self.long_foo_name_key)
      oprot.writeFieldEnd()
    if self.name_long_bar_key != None:
      oprot.writeFieldBegin('name_long_bar_key', TType.STRING, 65)
      oprot.writeString(self.name_long_bar_key.encode('utf-8')) if UTF8STRINGS and not isinstance(self.name_long_bar_key, bytes) else oprot.writeString(self.name_long_bar_key)
      oprot.writeFieldEnd()
    if self.long_key_foo_bar != None:
      oprot.writeFieldBegin('long_key_foo_bar', TType.STRING, 66)
      oprot.writeString(self.long_key_foo_bar.encode('utf-8')) if UTF8STRINGS and not isinstance(self.long_key_foo_bar, bytes) else oprot.writeString(self.long_key_foo_bar)
      oprot.writeFieldEnd()
    if self.name_key_foo_long != None:
      oprot.writeFieldBegin('name_key_foo_long', TType.STRING, 67)
      oprot.writeString(self.name_key_foo_long.encode('utf-8')) if UTF8STRINGS and not isinstance(self.name_key_foo_long, bytes) else oprot.writeString(self.name_key_foo_long)
      oprot.writeFieldEnd()
    if self.name_key_long_foo != None:
      oprot.writeFieldBegin('name_key_long_foo', TType.STRING, 68)
      oprot.writeString(self.name_key_long_foo.encode('utf-8')) if UTF8STRINGS and not isinstance(self.name_key_long_foo, bytes) else oprot.writeString(self.name_key_long_foo)
      oprot.writeFieldEnd()
    if self.key_name_foo_bar != None:
      oprot.writeFieldBegin('key_name_foo_bar', TType.STRING, 69)
      oprot.writeString(self.key_name_foo_bar.encode('utf-8')) if UTF8STRINGS and not isinstance(self.key_name_foo_bar, bytes) else oprot.writeString(self.key_name_foo_bar)
      oprot.writeFieldEnd()
    if self.long_foo_key_bar != None:
      oprot.writeFieldBegin('long_foo_key_bar', TType.STRING, 70)
      oprot.writeString(self.long_foo_key_bar.encode('utf-8')) if UTF8STRINGS and not isinstance(self.long_foo_key_bar, bytes) else oprot.writeString(self.long_foo_key_bar)
      oprot.writeFieldEnd()
    if self.foo_name_long_bar != None:
      oprot.writeFieldBegin('foo_name_long_bar', TType.STRING, 71)
      oprot.writeString(self.foo_name_long_bar.encode('utf-8')) if UTF8STRINGS and not isinstance(self.foo_name_long_bar, bytes) else oprot.writeString(self.foo_name_long_bar)
      oprot.writeFieldEnd()
    if self.name_long_bar_foo != None:
      oprot.writeFieldBegin('name_long_bar_foo', TType.STRING, 72)
      oprot.writeString(self.name_long_bar_foo.encode('utf-8')) if UTF8STRINGS and not isinstance(self.name_long_bar_foo, bytes) else oprot.writeString(self.name_long_bar_foo)
      oprot.writeFieldEnd()
    if self.long_name_bar_key != None:
      oprot.writeFieldBegin('long_name_bar_key', TType.STRING, 73)
      oprot.writeString(self.long_name_bar_key.encode('utf-8')) if UTF8STRINGS and not isinstance(self.long_name_bar_key, bytes) else oprot.writeString(self.long_name_bar_key)
      oprot.writeFieldEnd()
    if self.bar_long_foo_name != None:
      oprot.writeFieldBegin('bar_long_foo_name', TType.STRING, 74)
      oprot.writeString(self.bar_long_foo_name.encode('utf-8')) if UTF8STRINGS and not isinstance(self.bar_long_foo_name, bytes) else oprot.writeString(self.bar_long_foo_name)
      oprot.writeFieldEnd()
    if self.key_long_bar_name != None:
      oprot.writeFieldBegin('key_long_bar_name', TType.STRING, 75)
      oprot.writeString(self.key_long_bar_name.encode('utf-8')) if UTF8STRINGS and not isinstance(self.key_long_bar_name, bytes) else oprot.writeString(self.key_long_bar_name)
      oprot.writeFieldEnd()
    if self.name_key_bar_long != None:
      oprot.writeFieldBegin('name_key_bar_long', TType.STRING, 76)
      oprot.writeString(self.name_key_bar_long.encode('utf-8')) if UTF8STRINGS and not isinstance(self.name_key_bar_long, bytes) else oprot.writeString(self.name_key_bar_long)
      oprot.writeFieldEnd()
    if self.foo_long_name_key != None:
      oprot.writeFieldBegin('foo_long_name_key', TType.STRING, 77)
      oprot.writeString(self.foo_long_name_key.encode('utf-8')) if UTF8STRINGS and not isinstance(self.foo_long_name_key, bytes) else oprot.writeString(self.foo_long_name_key)
      oprot.writeFieldEnd()
    if self.bar_long_foo_key != None:
      oprot.writeFieldBegin('bar_long_foo_key', TType.STRING, 78)
      oprot.writeString(self.bar_long_foo_key.encode('utf-8')) if UTF8STRINGS and not isinstance(self.bar_long_foo_key, bytes) else oprot.writeString(self.bar_long_foo_key)
      oprot.writeFieldEnd()
    if self.bar_key_name_long != None:
      oprot.writeFieldBegin('bar_key_name_long', TType.STRING, 79)
      oprot.writeString(self.bar_key_name_long.encode('utf-8')) if UTF8STRINGS and not isinstance(self.bar_key_name_long, bytes) else oprot.writeString(self.bar_key_name_long)
      oprot.writeFieldEnd()
    if self.bar_foo_key_name != None:
      oprot.writeFieldBegin('bar_foo_key_name', TType.STRING, 80)
      oprot.writeString(self.bar_foo_key_name.encode('utf-8')) if UTF8STRINGS and not isinstance(self.bar_foo_key_name, bytes) else oprot.writeString(self.bar_foo_key_name)
      oprot.writeFieldEnd()
    if self.key_long_name_bar != None:
      oprot.writeFieldBegin('key_long_name_bar', TType.STRING, 81)
      oprot.writeString(self.key_long_name_bar.encode('utf-8')) if UTF8STRINGS and not isinstance(self.key_long_name_bar, bytes) else oprot.writeString(self.key_long_name_bar)
      oprot.writeFieldEnd()
    if self.long_bar_key_foo != None:
      oprot.writeFieldBegin('long_bar_key_foo', TType.STRING, 82)
      oprot.writeString(self.long_bar_key_foo.encode('utf-8')) if UTF8STRINGS and not isinstance(self.long_bar_key_foo, bytes) else oprot.writeString(self.long_bar_key_foo)
      oprot.writeFieldEnd()
    if self.foo_name_long_key != None:
      oprot.writeFieldBegin('foo_name_long_key', TType.STRING, 83)
      oprot.writeString(self.foo_name_long_key.encode('utf-8')) if UTF8STRINGS and not isinstance(self.foo_name_long_key, bytes) else oprot.writeString(self.foo_name_long_key)
      oprot.writeFieldEnd()
    if self.key_bar_long_foo != None:
      oprot.writeFieldBegin('key_bar_long_foo', TType.STRING, 84)
      oprot.writeString(self.key_bar_long_foo.encode('utf-8')) if UTF8STRINGS and not isinstance(self.key_bar_long_foo, bytes) else oprot.writeString(self.key_bar_long_foo)
      oprot.writeFieldEnd()
    if self.long_bar_name_key != None:
      oprot.writeFieldBegin('long_bar_name_key', TType.STRING, 85)
      oprot.writeString(self.long_bar_name_key.encode('utf-8')) if UTF8STRINGS and not isinstance(self.long_bar_name_key, bytes) else oprot.writeString(self.long_bar_name_key)
      oprot.writeFieldEnd()
    if self.name_bar_long_key != None:
      oprot.writeFieldBegin('name_bar_long_key', TType.STRING, 86)
      oprot.writeString(self.name_bar_long_key.encode('utf-8')) if UTF8STRINGS and not isinstance(self.name_bar_long_key, bytes) else oprot.writeString(self.name_bar_long_key)
      oprot.writeFieldEnd()
    if self.key_foo_long_name != None:
      oprot.writeFieldBegin('key_foo_long_name', TType.STRING, 87)
      oprot.writeString(self.key_foo_long_name.encode('utf-8')) if UTF8STRINGS and not isinstance(self.key_foo_long_name, bytes) else oprot.writeString(self.key_foo_long_name)
      oprot.writeFieldEnd()
    if self.foo_key_bar_long != None:
      oprot.writeFieldBegin('foo_key_bar_long', TType.STRING, 88)
      oprot.writeString(self.foo_key_bar_long.encode('utf-8')) if UTF8STRINGS and not isinstance(self.foo_key_bar_long, bytes) else oprot.writeString(self.foo_key_bar_long)
      oprot.writeFieldEnd()
    if self.foo_bar_key_long != None:
      oprot.writeFieldBegin('foo_bar_key_long', TType.STRING, 89)
      oprot.writeString(self.foo_bar_key_long.encode('utf-8')) if UTF8STRINGS and not isinstance(self.foo_bar_key_long, bytes) else oprot.writeString(self.foo_bar_key_long)
      oprot.writeFieldEnd()
    if self.bar_long_key_name != None:
      oprot.writeFieldBegin('bar_long_key_name', TType.STRING, 90)
      oprot.writeString(self.bar_long_key_name.encode('utf-8')) if UTF8STRINGS and not isinstance(self.bar_long_key_name, bytes) else oprot.writeString(self.bar_long_key_name)
      oprot.writeFieldEnd()
    if self.name_bar_key_foo != None:
      oprot.writeFieldBegin('name_bar_key_foo', TType.STRING, 91)
      oprot.writeString(self.name_bar_key_foo.encode('utf-8')) if UTF8STRINGS and not isinstance(self.name_bar_key_foo, bytes) else oprot.writeString(self.name_bar_key_foo)
      oprot.writeFieldEnd()
    if self.bar_name_key_long != None:
      oprot.writeFieldBegin('bar_name_key_long', TType.STRING, 92)
      oprot.writeString(self.bar_name_key_long.encode('utf-8')) if UTF8STRINGS and not isinstance(self.bar_name_key_long, bytes) else oprot.writeString(self.bar_name_key_long)
      oprot.writeFieldEnd()
    if self.bar_name_long_key != None:
      oprot.writeFieldBegin('bar_name_long_key', TType.STRING, 93)
      oprot.writeString(self.bar_name_long_key.encode('utf-8')) if UTF8STRINGS and not isinstance(self.bar_name_long_key, bytes) else oprot.writeString(self.bar_name_long_key)
      oprot.writeFieldEnd()
    if self.foo_key_name_bar != None:
      oprot.writeFieldBegin('foo_key_name_bar', TType.STRING, 94)
      oprot.writeString(self.foo_key_name_bar.encode('utf-8')) if UTF8STRINGS and not isinstance(self.foo_key_name_bar, bytes) else oprot.writeString(self.foo_key_name_bar)
      oprot.writeFieldEnd()
    if self.name_bar_foo_key != None:
      oprot.writeFieldBegin('name_bar_foo_key', TType.STRING, 95)
      oprot.writeString(self.name_bar_foo_key.encode('utf-8')) if UTF8STRINGS and not isinstance(self.name_bar_foo_key, bytes) else oprot.writeString(self.name_bar_foo_key)
      oprot.writeFieldEnd()
    if self.long_name_key_foo != None:
      oprot.writeFieldBegin('long_name_key_foo', TType.STRING, 96)
      oprot.writeString(self.long_name_key_foo.encode('utf-8')) if UTF8STRINGS and not isinstance(self.long_name_key_foo, bytes) else oprot.writeString(self.long_name_key_foo)
      oprot.writeFieldEnd()
    if self.long_name_key_bar != None:
      oprot.writeFieldBegin('long_name_key_bar', TType.STRING, 97)
      oprot.writeString(self.long_name_key_bar.encode('utf-8')) if UTF8STRINGS and not isinstance(self.long_name_key_bar, bytes) else oprot.writeString(self.long_name_key_bar)
      oprot.writeFieldEnd()
    if self.foo_key_long_name != None:
      oprot.writeFieldBegin('foo_key_long_name', TType.STRING, 98)
      oprot.writeString(self.foo_key_long_name.encode('utf-8')) if UTF8STRINGS and not isinstance(self.foo_key_long_name, bytes) else oprot.writeString(self.foo_key_long_name)
      oprot.writeFieldEnd()
    if self.foo_key_long_bar != None:
      oprot.writeFieldBegin('foo_key_long_bar', TType.STRING, 99)
      oprot.writeString(self.foo_key_long_bar.encode('utf-8')) if UTF8STRINGS and not isinstance(self.foo_key_long_bar, bytes) else oprot.writeString(self.foo_key_long_bar)
      oprot.writeFieldEnd()
    if self.foo_long_bar_name != None:
      oprot.writeFieldBegin('foo_long_bar_name', TType.STRING, 100)
      oprot.writeString(self.foo_long_bar_name.encode('utf-8')) if UTF8STRINGS and not isinstance(self.foo_long_bar_name, bytes) else oprot.writeString(self.foo_long_bar_name)
      oprot.writeFieldEnd()
    if self.key_long_name_foo != None:
      oprot.writeFieldBegin('key_long_name_foo', TType.STRING, 101)
      oprot.writeString(self.key_long_name_foo.encode('utf-8')) if UTF8STRINGS and not isinstance(self.key_long_name_foo, bytes) else oprot.writeString(self.key_long_name_foo)
      oprot.writeFieldEnd()
    if self.bar_key_long_name != None:
      oprot.writeFieldBegin('bar_key_long_name', TType.STRING, 102)
      oprot.writeString(self.bar_key_long_name.encode('utf-8')) if UTF8STRINGS and not isinstance(self.bar_key_long_name, bytes) else oprot.writeString(self.bar_key_long_name)
      oprot.writeFieldEnd()
    if self.foo_bar_name_key != None:
      oprot.writeFieldBegin('foo_bar_name_key', TType.STRING, 103)
      oprot.writeString(self.foo_bar_name_key.encode('utf-8')) if UTF8STRINGS and not isinstance(self.foo_bar_name_key, bytes) else oprot.writeString(self.foo_bar_name_key)
      oprot.writeFieldEnd()
    if self.key_bar_name_foo != None:
      oprot.writeFieldBegin('key_bar_name_foo', TType.STRING, 104)
      oprot.writeString(self.key_bar_name_foo.encode('utf-8')) if UTF8STRINGS and not isinstance(self.key_bar_name_foo, bytes) else oprot.writeString(self.key_bar_name_foo)
      oprot.writeFieldEnd()
    if self.foo_long_bar_key != None:
      oprot.writeFieldBegin('foo_long_bar_key', TType.STRING, 105)
      oprot.writeString(self.foo_long_bar_key.encode('utf-8')) if UTF8STRINGS and not isinstance(self.foo_long_bar_key, bytes) else oprot.writeString(self.foo_long_bar_key)
      oprot.writeFieldEnd()
    if self.name_key_foo_bar != None:
      oprot.writeFieldBegin('name_key_foo_bar', TType.STRING, 106)
      oprot.writeString(self.name_key_foo_bar.encode('utf-8')) if UTF8STRINGS and not isinstance(self.name_key_foo_bar, bytes) else oprot.writeString(self.name_key_foo_bar)
      oprot.writeFieldEnd()
    if self.bar_name_key_foo != None:
      oprot.writeFieldBegin('bar_name_key_foo', TType.STRING, 107)
      oprot.writeString(self.bar_name_key_foo.encode('utf-8')) if UTF8STRINGS and not isinstance(self.bar_name_key_foo, bytes) else oprot.writeString(self.bar_name_key_foo)
      oprot.writeFieldEnd()
    if self.long_key_name_foo != None:
      oprot.writeFieldBegin('long_key_name_foo', TType.STRING, 108)
      oprot.writeString(self.long_key_name_foo.encode('utf-8')) if UTF8STRINGS and not isinstance(self.long_key_name_foo, bytes) else oprot.writeString(self.long_key_name_foo)
      oprot.writeFieldEnd()
    if self.name_foo_bar_long != None:
      oprot.writeFieldBegin('name_foo_bar_long', TType.STRING, 109)
      oprot.writeString(self.name_foo_bar_long.encode('utf-8')) if UTF8STRINGS and not isinstance(self.name_foo_bar_long, bytes) else oprot.writeString(self.name_foo_bar_long)
      oprot.writeFieldEnd()
    if self.bar_long_name_foo != None:
      oprot.writeFieldBegin('bar_long_name_foo', TType.STRING, 110)
      oprot.writeString(self.bar_long_name_foo.encode('utf-8')) if UTF8STRINGS and not isinstance(self.bar_long_name_foo, bytes) else oprot.writeString(self.bar_long_name_foo)
      oprot.writeFieldEnd()
    if self.foo_key_bar_name != None:
      oprot.writeFieldBegin('foo_key_bar_name', TType.STRING, 111)
      oprot.writeString(self.foo_key_bar_name.encode('utf-8')) if UTF8STRINGS and not isinstance(self.foo_key_bar_name, bytes) else oprot.writeString(self.foo_key_bar_name)
      oprot.writeFieldEnd()
    if self.name_foo_bar_key != None:
      oprot.writeFieldBegin('name_foo_bar_key', TType.STRING, 112)
      oprot.writeString(self.name_foo_bar_key.encode('utf-8')) if UTF8STRINGS and not isinstance(self.name_foo_bar_key, bytes) else oprot.writeString(self.name_foo_bar_key)
      oprot.writeFieldEnd()
    if self.bar_key_name_foo != None:
      oprot.writeFieldBegin('bar_key_name_foo', TType.STRING, 113)
      oprot.writeString(self.bar_key_name_foo.encode('utf-8')) if UTF8STRINGS and not isinstance(self.bar_key_name_foo, bytes) else oprot.writeString(self.bar_key_name_foo)
      oprot.writeFieldEnd()
    if self.name_long_foo_bar != None:
      oprot.writeFieldBegin('name_long_foo_bar', TType.STRING, 114)
      oprot.writeString(self.name_long_foo_bar.encode('utf-8')) if UTF8STRINGS and not isinstance(self.name_long_foo_bar, bytes) else oprot.writeString(self.name_long_foo_bar)
      oprot.writeFieldEnd()
    if self.long_foo_bar_key != None:
      oprot.writeFieldBegin('long_foo_bar_key', TType.STRING, 115)
      oprot.writeString(self.long_foo_bar_key.encode('utf-8')) if UTF8STRINGS and not isinstance(self.long_foo_bar_key, bytes) else oprot.writeString(self.long_foo_bar_key)
      oprot.writeFieldEnd()
    if self.key_foo_bar_long != None:
      oprot.writeFieldBegin('key_foo_bar_long', TType.STRING, 116)
      oprot.writeString(self.key_foo_bar_long.encode('utf-8')) if UTF8STRINGS and not isinstance(self.key_foo_bar_long, bytes) else oprot.writeString(self.key_foo_bar_long)
      oprot.writeFieldEnd()
    if self.bar_name_foo_key != None:
      oprot.writeFieldBegin('bar_name_foo_key', TType.STRING, 117)
      oprot.writeString(self.bar_name_foo_key.encode('utf-8')) if UTF8STRINGS and not isinstance(self.bar_name_foo_key, bytes) else oprot.writeString(self.bar_name_foo_key)
      oprot.writeFieldEnd()
    if self.bar_foo_name_key != None:
      oprot.writeFieldBegin('bar_foo_name_key', TType.STRING, 118)
      oprot.writeString(self.bar_foo_name_key.encode('utf-8')) if UTF8STRINGS and not isinstance(self.bar_foo_name_key, bytes) else oprot.writeString(self.bar_foo_name_key)
      oprot.writeFieldEnd()
    if self.key_long_foo_bar != None:
      oprot.writeFieldBegin('key_long_foo_bar', TType.STRING, 119)
      oprot.writeString(self.key_long_foo_bar.encode('utf-8')) if UTF8STRINGS and not isinstance(self.key_long_foo_bar, bytes) else oprot.writeString(self.key_long_foo_bar)
      oprot.writeFieldEnd()
    if self.bar_key_foo_long != None:
      oprot.writeFieldBegin('bar_key_foo_long', TType.STRING, 120)
      oprot.writeString(self.bar_key_foo_long.encode('utf-8')) if UTF8STRINGS and not isinstance(self.bar_key_foo_long, bytes) else oprot.writeString(self.bar_key_foo_long)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = []
    for key, value in six.iteritems(self.__dict__):
      padding = ' ' * (len(key) + 1)
      value = pprint.pformat(value)
      value = padding.join(value.splitlines(True))
      L.append('    %s=%s' % (key, value))
    return "%s(\n%s)" % (self.__class__.__name__, ",\n".join(L))

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

all_structs.append(StructMap)
StructMap.thrift_spec = (
  None, # 0
  (1, TType.STRING, 'long_name_foo_bar', True, None, 0, ), # 1
  (2, TType.STRING, 'long_key_bar_name', True, None, 0, ), # 2
  (3, TType.STRING, 'long_foo_key_name', True, None, 0, ), # 3
  (4, TType.STRING, 'key_foo_bar_name', True, None, 0, ), # 4
  (5, TType.STRING, 'name_bar_long_foo', True, None, 0, ), # 5
  (6, TType.STRING, 'bar_foo_key_long', True, None, 0, ), # 6
  (7, TType.STRING, 'bar_foo_long_name', True, None, 0, ), # 7
  (8, TType.STRING, 'long_foo_name_bar', True, None, 0, ), # 8
  (9, TType.STRING, 'key_foo_name_long', True, None, 0, ), # 9
  (10, TType.STRING, 'name_long_foo_key', True, None, 0, ), # 10
  (11, TType.STRING, 'foo_bar_long_name', True, None, 0, ), # 11
  (12, TType.STRING, 'key_bar_name_long', True, None, 0, ), # 12
  (13, TType.STRING, 'bar_name_long_foo', True, None, 0, ), # 13
  (14, TType.STRING, 'key_name_bar_long', True, None, 0, ), # 14
  (15, TType.STRING, 'foo_name_bar_key', True, None, 0, ), # 15
  (16, TType.STRING, 'long_key_foo_name', True, None, 0, ), # 16
  (17, TType.STRING, 'name_foo_long_key', True, None, 0, ), # 17
  (18, TType.STRING, 'key_name_bar_foo', True, None, 0, ), # 18
  (19, TType.STRING, 'bar_long_name_key', True, None, 0, ), # 19
  (20, TType.STRING, 'long_bar_foo_key', True, None, 0, ), # 20
  (21, TType.STRING, 'bar_long_key_foo', True, None, 0, ), # 21
  (22, TType.STRING, 'foo_bar_long_key', True, None, 0, ), # 22
  (23, TType.STRING, 'name_foo_key_bar', True, None, 0, ), # 23
  (24, TType.STRING, 'name_key_long_bar', True, None, 0, ), # 24
  (25, TType.STRING, 'name_key_bar_foo', True, None, 0, ), # 25
  (26, TType.STRING, 'key_bar_long_name', True, None, 0, ), # 26
  (27, TType.STRING, 'long_key_name_bar', True, None, 0, ), # 27
  (28, TType.STRING, 'key_name_long_foo', True, None, 0, ), # 28
  (29, TType.STRING, 'foo_name_key_bar', True, None, 0, ), # 29
  (30, TType.STRING, 'key_name_long_bar', True, None, 0, ), # 30
  (31, TType.STRING, 'foo_name_bar_long', True, None, 0, ), # 31
  (32, TType.STRING, 'name_long_key_foo', True, None, 0, ), # 32
  (33, TType.STRING, 'name_long_key_bar', True, None, 0, ), # 33
  (34, TType.STRING, 'name_bar_foo_long', True, None, 0, ), # 34
  (35, TType.STRING, 'long_bar_name_foo', True, None, 0, ), # 35
  (36, TType.STRING, 'bar_key_foo_name', True, None, 0, ), # 36
  (37, TType.STRING, 'name_foo_key_long', True, None, 0, ), # 37
  (38, TType.STRING, 'foo_long_key_bar', True, None, 0, ), # 38
  (39, TType.STRING, 'key_foo_name_bar', True, None, 0, ), # 39
  (40, TType.STRING, 'key_name_foo_long', True, None, 0, ), # 40
  (41, TType.STRING, 'long_foo_bar_name', True, None, 0, ), # 41
  (42, TType.STRING, 'foo_name_key_long', True, None, 0, ), # 42
  (43, TType.STRING, 'bar_key_long_foo', True, None, 0, ), # 43
  (44, TType.STRING, 'bar_foo_long_key', True, None, 0, ), # 44
  (45, TType.STRING, 'key_long_foo_name', True, None, 0, ), # 45
  (46, TType.STRING, 'name_foo_long_bar', True, None, 0, ), # 46
  (47, TType.STRING, 'foo_key_name_long', True, None, 0, ), # 47
  (48, TType.STRING, 'long_name_bar_foo', True, None, 0, ), # 48
  (49, TType.STRING, 'foo_bar_name_long', True, None, 0, ), # 49
  (50, TType.STRING, 'foo_long_key_name', True, None, 0, ), # 50
  (51, TType.STRING, 'key_bar_foo_name', True, None, 0, ), # 51
  (52, TType.STRING, 'foo_bar_key_name', True, None, 0, ), # 52
  (53, TType.STRING, 'bar_name_foo_long', True, None, 0, ), # 53
  (54, TType.STRING, 'name_bar_key_long', True, None, 0, ), # 54
  (55, TType.STRING, 'key_bar_foo_long', True, None, 0, ), # 55
  (56, TType.STRING, 'long_key_bar_foo', True, None, 0, ), # 56
  (57, TType.STRING, 'key_foo_long_bar', True, None, 0, ), # 57
  (58, TType.STRING, 'bar_foo_name_long', True, None, 0, ), # 58
  (59, TType.STRING, 'key_long_bar_foo', True, None, 0, ), # 59
  (60, TType.STRING, 'long_bar_foo_name', True, None, 0, ), # 60
  (61, TType.STRING, 'foo_long_name_bar', True, None, 0, ), # 61
  (62, TType.STRING, 'long_bar_key_name', True, None, 0, ), # 62
  (63, TType.STRING, 'long_name_foo_key', True, None, 0, ), # 63
  (64, TType.STRING, 'long_foo_name_key', True, None, 0, ), # 64
  (65, TType.STRING, 'name_long_bar_key', True, None, 0, ), # 65
  (66, TType.STRING, 'long_key_foo_bar', True, None, 0, ), # 66
  (67, TType.STRING, 'name_key_foo_long', True, None, 0, ), # 67
  (68, TType.STRING, 'name_key_long_foo', True, None, 0, ), # 68
  (69, TType.STRING, 'key_name_foo_bar', True, None, 0, ), # 69
  (70, TType.STRING, 'long_foo_key_bar', True, None, 0, ), # 70
  (71, TType.STRING, 'foo_name_long_bar', True, None, 0, ), # 71
  (72, TType.STRING, 'name_long_bar_foo', True, None, 0, ), # 72
  (73, TType.STRING, 'long_name_bar_key', True, None, 0, ), # 73
  (74, TType.STRING, 'bar_long_foo_name', True, None, 0, ), # 74
  (75, TType.STRING, 'key_long_bar_name', True, None, 0, ), # 75
  (76, TType.STRING, 'name_key_bar_long', True, None, 0, ), # 76
  (77, TType.STRING, 'foo_long_name_key', True, None, 0, ), # 77
  (78, TType.STRING, 'bar_long_foo_key', True, None, 0, ), # 78
  (79, TType.STRING, 'bar_key_name_long', True, None, 0, ), # 79
  (80, TType.STRING, 'bar_foo_key_name', True, None, 0, ), # 80
  (81, TType.STRING, 'key_long_name_bar', True, None, 0, ), # 81
  (82, TType.STRING, 'long_bar_key_foo', True, None, 0, ), # 82
  (83, TType.STRING, 'foo_name_long_key', True, None, 0, ), # 83
  (84, TType.STRING, 'key_bar_long_foo', True, None, 0, ), # 84
  (85, TType.STRING, 'long_bar_name_key', True, None, 0, ), # 85
  (86, TType.STRING, 'name_bar_long_key', True, None, 0, ), # 86
  (87, TType.STRING, 'key_foo_long_name', True, None, 0, ), # 87
  (88, TType.STRING, 'foo_key_bar_long', True, None, 0, ), # 88
  (89, TType.STRING, 'foo_bar_key_long', True, None, 0, ), # 89
  (90, TType.STRING, 'bar_long_key_name', True, None, 0, ), # 90
  (91, TType.STRING, 'name_bar_key_foo', True, None, 0, ), # 91
  (92, TType.STRING, 'bar_name_key_long', True, None, 0, ), # 92
  (93, TType.STRING, 'bar_name_long_key', True, None, 0, ), # 93
  (94, TType.STRING, 'foo_key_name_bar', True, None, 0, ), # 94
  (95, TType.STRING, 'name_bar_foo_key', True, None, 0, ), # 95
  (96, TType.STRING, 'long_name_key_foo', True, None, 0, ), # 96
  (97, TType.STRING, 'long_name_key_bar', True, None, 0, ), # 97
  (98, TType.STRING, 'foo_key_long_name', True, None, 0, ), # 98
  (99, TType.STRING, 'foo_key_long_bar', True, None, 0, ), # 99
  (100, TType.STRING, 'foo_long_bar_name', True, None, 0, ), # 100
  (101, TType.STRING, 'key_long_name_foo', True, None, 0, ), # 101
  (102, TType.STRING, 'bar_key_long_name', True, None, 0, ), # 102
  (103, TType.STRING, 'foo_bar_name_key', True, None, 0, ), # 103
  (104, TType.STRING, 'key_bar_name_foo', True, None, 0, ), # 104
  (105, TType.STRING, 'foo_long_bar_key', True, None, 0, ), # 105
  (106, TType.STRING, 'name_key_foo_bar', True, None, 0, ), # 106
  (107, TType.STRING, 'bar_name_key_foo', True, None, 0, ), # 107
  (108, TType.STRING, 'long_key_name_foo', True, None, 0, ), # 108
  (109, TType.STRING, 'name_foo_bar_long', True, None, 0, ), # 109
  (110, TType.STRING, 'bar_long_name_foo', True, None, 0, ), # 110
  (111, TType.STRING, 'foo_key_bar_name', True, None, 0, ), # 111
  (112, TType.STRING, 'name_foo_bar_key', True, None, 0, ), # 112
  (113, TType.STRING, 'bar_key_name_foo', True, None, 0, ), # 113
  (114, TType.STRING, 'name_long_foo_bar', True, None, 0, ), # 114
  (115, TType.STRING, 'long_foo_bar_key', True, None, 0, ), # 115
  (116, TType.STRING, 'key_foo_bar_long', True, None, 0, ), # 116
  (117, TType.STRING, 'bar_name_foo_key', True, None, 0, ), # 117
  (118, TType.STRING, 'bar_foo_name_key', True, None, 0, ), # 118
  (119, TType.STRING, 'key_long_foo_bar', True, None, 0, ), # 119
  (120, TType.STRING, 'bar_key_foo_long', True, None, 0, ), # 120
)

StructMap.thrift_struct_annotations = {
}
StructMap.thrift_field_annotations = {
}

def StructMap__init__(self, long_name_foo_bar=None, long_key_bar_name=None, long_foo_key_name=None, key_foo_bar_name=None, name_bar_long_foo=None, bar_foo_key_long=None, bar_foo_long_name=None, long_foo_name_bar=None, key_foo_name_long=None, name_long_foo_key=None, foo_bar_long_name=None, key_bar_name_long=None, bar_name_long_foo=None, key_name_bar_long=None, foo_name_bar_key=None, long_key_foo_name=None, name_foo_long_key=None, key_name_bar_foo=None, bar_long_name_key=None, long_bar_foo_key=None, bar_long_key_foo=None, foo_bar_long_key=None, name_foo_key_bar=None, name_key_long_bar=None, name_key_bar_foo=None, key_bar_long_name=None, long_key_name_bar=None, key_name_long_foo=None, foo_name_key_bar=None, key_name_long_bar=None, foo_name_bar_long=None, name_long_key_foo=None, name_long_key_bar=None, name_bar_foo_long=None, long_bar_name_foo=None, bar_key_foo_name=None, name_foo_key_long=None, foo_long_key_bar=None, key_foo_name_bar=None, key_name_foo_long=None, long_foo_bar_name=None, foo_name_key_long=None, bar_key_long_foo=None, bar_foo_long_key=None, key_long_foo_name=None, name_foo_long_bar=None, foo_key_name_long=None, long_name_bar_foo=None, foo_bar_name_long=None, foo_long_key_name=None, key_bar_foo_name=None, foo_bar_key_name=None, bar_name_foo_long=None, name_bar_key_long=None, key_bar_foo_long=None, long_key_bar_foo=None, key_foo_long_bar=None, bar_foo_name_long=None, key_long_bar_foo=None, long_bar_foo_name=None, foo_long_name_bar=None, long_bar_key_name=None, long_name_foo_key=None, long_foo_name_key=None, name_long_bar_key=None, long_key_foo_bar=None, name_key_foo_long=None, name_key_long_foo=None, key_name_foo_bar=None, long_foo_key_bar=None, foo_name_long_bar=None, name_long_bar_foo=None, long_name_bar_key=None, bar_long_foo_name=None, key_long_bar_name=None, name_key_bar_long=None, foo_long_name_key=None, bar_long_foo_key=None, bar_key_name_long=None, bar_foo_key_name=None, key_long_name_bar=None, long_bar_key_foo=None, foo_name_long_key=None, key_bar_long_foo=None, long_bar_name_key=None, name_bar_long_key=None, key_foo_long_name=None, foo_key_bar_long=None, foo_bar_key_long=None, bar_long_key_name=None, name_bar_key_foo=None, bar_name_key_long=None, bar_name_long_key=None, foo_key_name_bar=None, name_bar_foo_key=None, long_name_key_foo=None, long_name_key_bar=None, foo_key_long_name=None, foo_key_long_bar=None, foo_long_bar_name=None, key_long_name_foo=None, bar_key_long_name=None, foo_bar_name_key=None, key_bar_name_foo=None, foo_long_bar_key=None, name_key_foo_bar=None, bar_name_key_foo=None, long_key_name_foo=None, name_foo_bar_long=None, bar_long_name_foo=None, foo_key_bar_name=None, name_foo_bar_key=None, bar_key_name_foo=None, name_long_foo_bar=None, long_foo_bar_key=None, key_foo_bar_long=None, bar_name_foo_key=None, bar_foo_name_key=None, key_long_foo_bar=None, bar_key_foo_long=None,):
  self.long_name_foo_bar = long_name_foo_bar
  self.long_key_bar_name = long_key_bar_name
  self.long_foo_key_name = long_foo_key_name
  self.key_foo_bar_name = key_foo_bar_name
  self.name_bar_long_foo = name_bar_long_foo
  self.bar_foo_key_long = bar_foo_key_long
  self.bar_foo_long_name = bar_foo_long_name
  self.long_foo_name_bar = long_foo_name_bar
  self.key_foo_name_long = key_foo_name_long
  self.name_long_foo_key = name_long_foo_key
  self.foo_bar_long_name = foo_bar_long_name
  self.key_bar_name_long = key_bar_name_long
  self.bar_name_long_foo = bar_name_long_foo
  self.key_name_bar_long = key_name_bar_long
  self.foo_name_bar_key = foo_name_bar_key
  self.long_key_foo_name = long_key_foo_name
  self.name_foo_long_key = name_foo_long_key
  self.key_name_bar_foo = key_name_bar_foo
  self.bar_long_name_key = bar_long_name_key
  self.long_bar_foo_key = long_bar_foo_key
  self.bar_long_key_foo = bar_long_key_foo
  self.foo_bar_long_key = foo_bar_long_key
  self.name_foo_key_bar = name_foo_key_bar
  self.name_key_long_bar = name_key_long_bar
  self.name_key_bar_foo = name_key_bar_foo
  self.key_bar_long_name = key_bar_long_name
  self.long_key_name_bar = long_key_name_bar
  self.key_name_long_foo = key_name_long_foo
  self.foo_name_key_bar = foo_name_key_bar
  self.key_name_long_bar = key_name_long_bar
  self.foo_name_bar_long = foo_name_bar_long
  self.name_long_key_foo = name_long_key_foo
  self.name_long_key_bar = name_long_key_bar
  self.name_bar_foo_long = name_bar_foo_long
  self.long_bar_name_foo = long_bar_name_foo
  self.bar_key_foo_name = bar_key_foo_name
  self.name_foo_key_long = name_foo_key_long
  self.foo_long_key_bar = foo_long_key_bar
  self.key_foo_name_bar = key_foo_name_bar
  self.key_name_foo_long = key_name_foo_long
  self.long_foo_bar_name = long_foo_bar_name
  self.foo_name_key_long = foo_name_key_long
  self.bar_key_long_foo = bar_key_long_foo
  self.bar_foo_long_key = bar_foo_long_key
  self.key_long_foo_name = key_long_foo_name
  self.name_foo_long_bar = name_foo_long_bar
  self.foo_key_name_long = foo_key_name_long
  self.long_name_bar_foo = long_name_bar_foo
  self.foo_bar_name_long = foo_bar_name_long
  self.foo_long_key_name = foo_long_key_name
  self.key_bar_foo_name = key_bar_foo_name
  self.foo_bar_key_name = foo_bar_key_name
  self.bar_name_foo_long = bar_name_foo_long
  self.name_bar_key_long = name_bar_key_long
  self.key_bar_foo_long = key_bar_foo_long
  self.long_key_bar_foo = long_key_bar_foo
  self.key_foo_long_bar = key_foo_long_bar
  self.bar_foo_name_long = bar_foo_name_long
  self.key_long_bar_foo = key_long_bar_foo
  self.long_bar_foo_name = long_bar_foo_name
  self.foo_long_name_bar = foo_long_name_bar
  self.long_bar_key_name = long_bar_key_name
  self.long_name_foo_key = long_name_foo_key
  self.long_foo_name_key = long_foo_name_key
  self.name_long_bar_key = name_long_bar_key
  self.long_key_foo_bar = long_key_foo_bar
  self.name_key_foo_long = name_key_foo_long
  self.name_key_long_foo = name_key_long_foo
  self.key_name_foo_bar = key_name_foo_bar
  self.long_foo_key_bar = long_foo_key_bar
  self.foo_name_long_bar = foo_name_long_bar
  self.name_long_bar_foo = name_long_bar_foo
  self.long_name_bar_key = long_name_bar_key
  self.bar_long_foo_name = bar_long_foo_name
  self.key_long_bar_name = key_long_bar_name
  self.name_key_bar_long = name_key_bar_long
  self.foo_long_name_key = foo_long_name_key
  self.bar_long_foo_key = bar_long_foo_key
  self.bar_key_name_long = bar_key_name_long
  self.bar_foo_key_name = bar_foo_key_name
  self.key_long_name_bar = key_long_name_bar
  self.long_bar_key_foo = long_bar_key_foo
  self.foo_name_long_key = foo_name_long_key
  self.key_bar_long_foo = key_bar_long_foo
  self.long_bar_name_key = long_bar_name_key
  self.name_bar_long_key = name_bar_long_key
  self.key_foo_long_name = key_foo_long_name
  self.foo_key_bar_long = foo_key_bar_long
  self.foo_bar_key_long = foo_bar_key_long
  self.bar_long_key_name = bar_long_key_name
  self.name_bar_key_foo = name_bar_key_foo
  self.bar_name_key_long = bar_name_key_long
  self.bar_name_long_key = bar_name_long_key
  self.foo_key_name_bar = foo_key_name_bar
  self.name_bar_foo_key = name_bar_foo_key
  self.long_name_key_foo = long_name_key_foo
  self.long_name_key_bar = long_name_key_bar
  self.foo_key_long_name = foo_key_long_name
  self.foo_key_long_bar = foo_key_long_bar
  self.foo_long_bar_name = foo_long_bar_name
  self.key_long_name_foo = key_long_name_foo
  self.bar_key_long_name = bar_key_long_name
  self.foo_bar_name_key = foo_bar_name_key
  self.key_bar_name_foo = key_bar_name_foo
  self.foo_long_bar_key = foo_long_bar_key
  self.name_key_foo_bar = name_key_foo_bar
  self.bar_name_key_foo = bar_name_key_foo
  self.long_key_name_foo = long_key_name_foo
  self.name_foo_bar_long = name_foo_bar_long
  self.bar_long_name_foo = bar_long_name_foo
  self.foo_key_bar_name = foo_key_bar_name
  self.name_foo_bar_key = name_foo_bar_key
  self.bar_key_name_foo = bar_key_name_foo
  self.name_long_foo_bar = name_long_foo_bar
  self.long_foo_bar_key = long_foo_bar_key
  self.key_foo_bar_long = key_foo_bar_long
  self.bar_name_foo_key = bar_name_foo_key
  self.bar_foo_name_key = bar_foo_name_key
  self.key_long_foo_bar = key_long_foo_bar
  self.bar_key_foo_long = bar_key_foo_long

StructMap.__init__ = StructMap__init__

fix_spec(all_structs)
del all_structs
